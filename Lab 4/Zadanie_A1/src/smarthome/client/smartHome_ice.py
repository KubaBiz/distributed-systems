# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `smartHome.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Smarthome
_M_Smarthome = Ice.openModule('Smarthome')
__name__ = 'Smarthome'

if 'InvalidTemperature' not in _M_Smarthome.__dict__:
    _M_Smarthome.InvalidTemperature = Ice.createTempClass()
    class InvalidTemperature(Ice.UserException):
        def __init__(self, message=''):
            self.message = message

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Smarthome::InvalidTemperature'

    _M_Smarthome._t_InvalidTemperature = IcePy.defineException('::Smarthome::InvalidTemperature', InvalidTemperature, (), False, None, (('message', (), IcePy._t_string, False, 0),))
    InvalidTemperature._ice_type = _M_Smarthome._t_InvalidTemperature

    _M_Smarthome.InvalidTemperature = InvalidTemperature
    del InvalidTemperature

if 'AboveMaxTemperature' not in _M_Smarthome.__dict__:
    _M_Smarthome.AboveMaxTemperature = Ice.createTempClass()
    class AboveMaxTemperature(Ice.UserException):
        def __init__(self, message=''):
            self.message = message

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Smarthome::AboveMaxTemperature'

    _M_Smarthome._t_AboveMaxTemperature = IcePy.defineException('::Smarthome::AboveMaxTemperature', AboveMaxTemperature, (), False, None, (('message', (), IcePy._t_string, False, 0),))
    AboveMaxTemperature._ice_type = _M_Smarthome._t_AboveMaxTemperature

    _M_Smarthome.AboveMaxTemperature = AboveMaxTemperature
    del AboveMaxTemperature

if 'TemperatureRange' not in _M_Smarthome.__dict__:
    _M_Smarthome.TemperatureRange = Ice.createTempClass()
    class TemperatureRange(object):
        def __init__(self, minTemp=0.0, maxTemp=0.0):
            self.minTemp = minTemp
            self.maxTemp = maxTemp

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_Smarthome.TemperatureRange):
                return NotImplemented
            else:
                if self.minTemp != other.minTemp:
                    return False
                if self.maxTemp != other.maxTemp:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthome._t_TemperatureRange)

        __repr__ = __str__

    _M_Smarthome._t_TemperatureRange = IcePy.defineStruct('::Smarthome::TemperatureRange', TemperatureRange, (), (
        ('minTemp', (), IcePy._t_float),
        ('maxTemp', (), IcePy._t_float)
    ))

    _M_Smarthome.TemperatureRange = TemperatureRange
    del TemperatureRange

if 'FurnaceStatus' not in _M_Smarthome.__dict__:
    _M_Smarthome.FurnaceStatus = Ice.createTempClass()
    class FurnaceStatus(object):
        def __init__(self, currentTemp=0.0, maxTemp=0.0, isFlame=False):
            self.currentTemp = currentTemp
            self.maxTemp = maxTemp
            self.isFlame = isFlame

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_Smarthome.FurnaceStatus):
                return NotImplemented
            else:
                if self.currentTemp != other.currentTemp:
                    return False
                if self.maxTemp != other.maxTemp:
                    return False
                if self.isFlame != other.isFlame:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthome._t_FurnaceStatus)

        __repr__ = __str__

    _M_Smarthome._t_FurnaceStatus = IcePy.defineStruct('::Smarthome::FurnaceStatus', FurnaceStatus, (), (
        ('currentTemp', (), IcePy._t_float),
        ('maxTemp', (), IcePy._t_float),
        ('isFlame', (), IcePy._t_bool)
    ))

    _M_Smarthome.FurnaceStatus = FurnaceStatus
    del FurnaceStatus

_M_Smarthome._t_Refrigerator = IcePy.defineValue('::Smarthome::Refrigerator', Ice.Value, -1, (), False, True, None, ())

if 'RefrigeratorPrx' not in _M_Smarthome.__dict__:
    _M_Smarthome.RefrigeratorPrx = Ice.createTempClass()
    class RefrigeratorPrx(Ice.ObjectPrx):

        def getTemperature(self, context=None):
            return _M_Smarthome.Refrigerator._op_getTemperature.invoke(self, ((), context))

        def getTemperatureAsync(self, context=None):
            return _M_Smarthome.Refrigerator._op_getTemperature.invokeAsync(self, ((), context))

        def begin_getTemperature(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.Refrigerator._op_getTemperature.begin(self, ((), _response, _ex, _sent, context))

        def end_getTemperature(self, _r):
            return _M_Smarthome.Refrigerator._op_getTemperature.end(self, _r)

        def getTempRange(self, context=None):
            return _M_Smarthome.Refrigerator._op_getTempRange.invoke(self, ((), context))

        def getTempRangeAsync(self, context=None):
            return _M_Smarthome.Refrigerator._op_getTempRange.invokeAsync(self, ((), context))

        def begin_getTempRange(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.Refrigerator._op_getTempRange.begin(self, ((), _response, _ex, _sent, context))

        def end_getTempRange(self, _r):
            return _M_Smarthome.Refrigerator._op_getTempRange.end(self, _r)

        def setTemperature(self, temp, context=None):
            return _M_Smarthome.Refrigerator._op_setTemperature.invoke(self, ((temp, ), context))

        def setTemperatureAsync(self, temp, context=None):
            return _M_Smarthome.Refrigerator._op_setTemperature.invokeAsync(self, ((temp, ), context))

        def begin_setTemperature(self, temp, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.Refrigerator._op_setTemperature.begin(self, ((temp, ), _response, _ex, _sent, context))

        def end_setTemperature(self, _r):
            return _M_Smarthome.Refrigerator._op_setTemperature.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Smarthome.RefrigeratorPrx.ice_checkedCast(proxy, '::Smarthome::Refrigerator', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Smarthome.RefrigeratorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Smarthome::Refrigerator'
    _M_Smarthome._t_RefrigeratorPrx = IcePy.defineProxy('::Smarthome::Refrigerator', RefrigeratorPrx)

    _M_Smarthome.RefrigeratorPrx = RefrigeratorPrx
    del RefrigeratorPrx

    _M_Smarthome.Refrigerator = Ice.createTempClass()
    class Refrigerator(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Smarthome::Refrigerator')

        def ice_id(self, current=None):
            return '::Smarthome::Refrigerator'

        @staticmethod
        def ice_staticId():
            return '::Smarthome::Refrigerator'

        def getTemperature(self, current=None):
            raise NotImplementedError("servant method 'getTemperature' not implemented")

        def getTempRange(self, current=None):
            raise NotImplementedError("servant method 'getTempRange' not implemented")

        def setTemperature(self, temp, current=None):
            raise NotImplementedError("servant method 'setTemperature' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthome._t_RefrigeratorDisp)

        __repr__ = __str__

    _M_Smarthome._t_RefrigeratorDisp = IcePy.defineClass('::Smarthome::Refrigerator', Refrigerator, (), None, ())
    Refrigerator._ice_type = _M_Smarthome._t_RefrigeratorDisp

    Refrigerator._op_getTemperature = IcePy.Operation('getTemperature', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())
    Refrigerator._op_getTempRange = IcePy.Operation('getTempRange', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_Smarthome._t_TemperatureRange, False, 0), ())
    Refrigerator._op_setTemperature = IcePy.Operation('setTemperature', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), None, (_M_Smarthome._t_InvalidTemperature,))

    _M_Smarthome.Refrigerator = Refrigerator
    del Refrigerator

_M_Smarthome._t_Bulbulator = IcePy.defineValue('::Smarthome::Bulbulator', Ice.Value, -1, (), False, True, None, ())

if 'BulbulatorPrx' not in _M_Smarthome.__dict__:
    _M_Smarthome.BulbulatorPrx = Ice.createTempClass()
    class BulbulatorPrx(Ice.ObjectPrx):

        def isBulbing(self, context=None):
            return _M_Smarthome.Bulbulator._op_isBulbing.invoke(self, ((), context))

        def isBulbingAsync(self, context=None):
            return _M_Smarthome.Bulbulator._op_isBulbing.invokeAsync(self, ((), context))

        def begin_isBulbing(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.Bulbulator._op_isBulbing.begin(self, ((), _response, _ex, _sent, context))

        def end_isBulbing(self, _r):
            return _M_Smarthome.Bulbulator._op_isBulbing.end(self, _r)

        def setBulbing(self, onOff, context=None):
            return _M_Smarthome.Bulbulator._op_setBulbing.invoke(self, ((onOff, ), context))

        def setBulbingAsync(self, onOff, context=None):
            return _M_Smarthome.Bulbulator._op_setBulbing.invokeAsync(self, ((onOff, ), context))

        def begin_setBulbing(self, onOff, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.Bulbulator._op_setBulbing.begin(self, ((onOff, ), _response, _ex, _sent, context))

        def end_setBulbing(self, _r):
            return _M_Smarthome.Bulbulator._op_setBulbing.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Smarthome.BulbulatorPrx.ice_checkedCast(proxy, '::Smarthome::Bulbulator', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Smarthome.BulbulatorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Smarthome::Bulbulator'
    _M_Smarthome._t_BulbulatorPrx = IcePy.defineProxy('::Smarthome::Bulbulator', BulbulatorPrx)

    _M_Smarthome.BulbulatorPrx = BulbulatorPrx
    del BulbulatorPrx

    _M_Smarthome.Bulbulator = Ice.createTempClass()
    class Bulbulator(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Smarthome::Bulbulator')

        def ice_id(self, current=None):
            return '::Smarthome::Bulbulator'

        @staticmethod
        def ice_staticId():
            return '::Smarthome::Bulbulator'

        def isBulbing(self, current=None):
            raise NotImplementedError("servant method 'isBulbing' not implemented")

        def setBulbing(self, onOff, current=None):
            raise NotImplementedError("servant method 'setBulbing' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthome._t_BulbulatorDisp)

        __repr__ = __str__

    _M_Smarthome._t_BulbulatorDisp = IcePy.defineClass('::Smarthome::Bulbulator', Bulbulator, (), None, ())
    Bulbulator._ice_type = _M_Smarthome._t_BulbulatorDisp

    Bulbulator._op_isBulbing = IcePy.Operation('isBulbing', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    Bulbulator._op_setBulbing = IcePy.Operation('setBulbing', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_bool, False, 0),), (), None, ())

    _M_Smarthome.Bulbulator = Bulbulator
    del Bulbulator

_M_Smarthome._t_Furnace = IcePy.defineValue('::Smarthome::Furnace', Ice.Value, -1, (), False, True, None, ())

if 'FurnacePrx' not in _M_Smarthome.__dict__:
    _M_Smarthome.FurnacePrx = Ice.createTempClass()
    class FurnacePrx(Ice.ObjectPrx):

        def getStatus(self, context=None):
            return _M_Smarthome.Furnace._op_getStatus.invoke(self, ((), context))

        def getStatusAsync(self, context=None):
            return _M_Smarthome.Furnace._op_getStatus.invokeAsync(self, ((), context))

        def begin_getStatus(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.Furnace._op_getStatus.begin(self, ((), _response, _ex, _sent, context))

        def end_getStatus(self, _r):
            return _M_Smarthome.Furnace._op_getStatus.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Smarthome.FurnacePrx.ice_checkedCast(proxy, '::Smarthome::Furnace', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Smarthome.FurnacePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Smarthome::Furnace'
    _M_Smarthome._t_FurnacePrx = IcePy.defineProxy('::Smarthome::Furnace', FurnacePrx)

    _M_Smarthome.FurnacePrx = FurnacePrx
    del FurnacePrx

    _M_Smarthome.Furnace = Ice.createTempClass()
    class Furnace(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Smarthome::Furnace')

        def ice_id(self, current=None):
            return '::Smarthome::Furnace'

        @staticmethod
        def ice_staticId():
            return '::Smarthome::Furnace'

        def getStatus(self, current=None):
            raise NotImplementedError("servant method 'getStatus' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthome._t_FurnaceDisp)

        __repr__ = __str__

    _M_Smarthome._t_FurnaceDisp = IcePy.defineClass('::Smarthome::Furnace', Furnace, (), None, ())
    Furnace._ice_type = _M_Smarthome._t_FurnaceDisp

    Furnace._op_getStatus = IcePy.Operation('getStatus', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_Smarthome._t_FurnaceStatus, False, 0), ())

    _M_Smarthome.Furnace = Furnace
    del Furnace

_M_Smarthome._t_GasFurnace = IcePy.defineValue('::Smarthome::GasFurnace', Ice.Value, -1, (), False, True, None, ())

if 'GasFurnacePrx' not in _M_Smarthome.__dict__:
    _M_Smarthome.GasFurnacePrx = Ice.createTempClass()
    class GasFurnacePrx(_M_Smarthome.FurnacePrx):

        def getTempRange(self, context=None):
            return _M_Smarthome.GasFurnace._op_getTempRange.invoke(self, ((), context))

        def getTempRangeAsync(self, context=None):
            return _M_Smarthome.GasFurnace._op_getTempRange.invokeAsync(self, ((), context))

        def begin_getTempRange(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.GasFurnace._op_getTempRange.begin(self, ((), _response, _ex, _sent, context))

        def end_getTempRange(self, _r):
            return _M_Smarthome.GasFurnace._op_getTempRange.end(self, _r)

        def setTemperature(self, temp, context=None):
            return _M_Smarthome.GasFurnace._op_setTemperature.invoke(self, ((temp, ), context))

        def setTemperatureAsync(self, temp, context=None):
            return _M_Smarthome.GasFurnace._op_setTemperature.invokeAsync(self, ((temp, ), context))

        def begin_setTemperature(self, temp, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.GasFurnace._op_setTemperature.begin(self, ((temp, ), _response, _ex, _sent, context))

        def end_setTemperature(self, _r):
            return _M_Smarthome.GasFurnace._op_setTemperature.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Smarthome.GasFurnacePrx.ice_checkedCast(proxy, '::Smarthome::GasFurnace', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Smarthome.GasFurnacePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Smarthome::GasFurnace'
    _M_Smarthome._t_GasFurnacePrx = IcePy.defineProxy('::Smarthome::GasFurnace', GasFurnacePrx)

    _M_Smarthome.GasFurnacePrx = GasFurnacePrx
    del GasFurnacePrx

    _M_Smarthome.GasFurnace = Ice.createTempClass()
    class GasFurnace(_M_Smarthome.Furnace):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Smarthome::Furnace', '::Smarthome::GasFurnace')

        def ice_id(self, current=None):
            return '::Smarthome::GasFurnace'

        @staticmethod
        def ice_staticId():
            return '::Smarthome::GasFurnace'

        def getTempRange(self, current=None):
            raise NotImplementedError("servant method 'getTempRange' not implemented")

        def setTemperature(self, temp, current=None):
            raise NotImplementedError("servant method 'setTemperature' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthome._t_GasFurnaceDisp)

        __repr__ = __str__

    _M_Smarthome._t_GasFurnaceDisp = IcePy.defineClass('::Smarthome::GasFurnace', GasFurnace, (), None, (_M_Smarthome._t_FurnaceDisp,))
    GasFurnace._ice_type = _M_Smarthome._t_GasFurnaceDisp

    GasFurnace._op_getTempRange = IcePy.Operation('getTempRange', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_Smarthome._t_TemperatureRange, False, 0), ())
    GasFurnace._op_setTemperature = IcePy.Operation('setTemperature', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), None, (_M_Smarthome._t_InvalidTemperature,))

    _M_Smarthome.GasFurnace = GasFurnace
    del GasFurnace

_M_Smarthome._t_CoalFurnace = IcePy.defineValue('::Smarthome::CoalFurnace', Ice.Value, -1, (), False, True, None, ())

if 'CoalFurnacePrx' not in _M_Smarthome.__dict__:
    _M_Smarthome.CoalFurnacePrx = Ice.createTempClass()
    class CoalFurnacePrx(_M_Smarthome.FurnacePrx):

        def setMaxTemperature(self, temp, context=None):
            return _M_Smarthome.CoalFurnace._op_setMaxTemperature.invoke(self, ((temp, ), context))

        def setMaxTemperatureAsync(self, temp, context=None):
            return _M_Smarthome.CoalFurnace._op_setMaxTemperature.invokeAsync(self, ((temp, ), context))

        def begin_setMaxTemperature(self, temp, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.CoalFurnace._op_setMaxTemperature.begin(self, ((temp, ), _response, _ex, _sent, context))

        def end_setMaxTemperature(self, _r):
            return _M_Smarthome.CoalFurnace._op_setMaxTemperature.end(self, _r)

        def isDispenserOn(self, context=None):
            return _M_Smarthome.CoalFurnace._op_isDispenserOn.invoke(self, ((), context))

        def isDispenserOnAsync(self, context=None):
            return _M_Smarthome.CoalFurnace._op_isDispenserOn.invokeAsync(self, ((), context))

        def begin_isDispenserOn(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.CoalFurnace._op_isDispenserOn.begin(self, ((), _response, _ex, _sent, context))

        def end_isDispenserOn(self, _r):
            return _M_Smarthome.CoalFurnace._op_isDispenserOn.end(self, _r)

        def turnDispenser(self, context=None):
            return _M_Smarthome.CoalFurnace._op_turnDispenser.invoke(self, ((), context))

        def turnDispenserAsync(self, context=None):
            return _M_Smarthome.CoalFurnace._op_turnDispenser.invokeAsync(self, ((), context))

        def begin_turnDispenser(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.CoalFurnace._op_turnDispenser.begin(self, ((), _response, _ex, _sent, context))

        def end_turnDispenser(self, _r):
            return _M_Smarthome.CoalFurnace._op_turnDispenser.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Smarthome.CoalFurnacePrx.ice_checkedCast(proxy, '::Smarthome::CoalFurnace', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Smarthome.CoalFurnacePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Smarthome::CoalFurnace'
    _M_Smarthome._t_CoalFurnacePrx = IcePy.defineProxy('::Smarthome::CoalFurnace', CoalFurnacePrx)

    _M_Smarthome.CoalFurnacePrx = CoalFurnacePrx
    del CoalFurnacePrx

    _M_Smarthome.CoalFurnace = Ice.createTempClass()
    class CoalFurnace(_M_Smarthome.Furnace):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Smarthome::CoalFurnace', '::Smarthome::Furnace')

        def ice_id(self, current=None):
            return '::Smarthome::CoalFurnace'

        @staticmethod
        def ice_staticId():
            return '::Smarthome::CoalFurnace'

        def setMaxTemperature(self, temp, current=None):
            raise NotImplementedError("servant method 'setMaxTemperature' not implemented")

        def isDispenserOn(self, current=None):
            raise NotImplementedError("servant method 'isDispenserOn' not implemented")

        def turnDispenser(self, current=None):
            raise NotImplementedError("servant method 'turnDispenser' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthome._t_CoalFurnaceDisp)

        __repr__ = __str__

    _M_Smarthome._t_CoalFurnaceDisp = IcePy.defineClass('::Smarthome::CoalFurnace', CoalFurnace, (), None, (_M_Smarthome._t_FurnaceDisp,))
    CoalFurnace._ice_type = _M_Smarthome._t_CoalFurnaceDisp

    CoalFurnace._op_setMaxTemperature = IcePy.Operation('setMaxTemperature', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), None, (_M_Smarthome._t_InvalidTemperature,))
    CoalFurnace._op_isDispenserOn = IcePy.Operation('isDispenserOn', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    CoalFurnace._op_turnDispenser = IcePy.Operation('turnDispenser', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_Smarthome._t_AboveMaxTemperature,))

    _M_Smarthome.CoalFurnace = CoalFurnace
    del CoalFurnace

# End of module Smarthome
